// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/topic/topic.proto

/*
Package gprc_tutorial_topic is a generated protocol buffer package.

It is generated from these files:
	proto/topic/topic.proto

It has these top-level messages:
	Topic
	GetRequest
	Response
*/
package gprc_tutorial_topic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	CategoryId  string `protobuf:"bytes,5,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Topic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Topic) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Topic) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Topic) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Topic) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Created bool     `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Topic   *Topic   `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Topics  []*Topic `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *Response) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Response) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*Topic)(nil), "gprc.tutorial.topic.Topic")
	proto.RegisterType((*GetRequest)(nil), "gprc.tutorial.topic.GetRequest")
	proto.RegisterType((*Response)(nil), "gprc.tutorial.topic.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TopicService service

type TopicServiceClient interface {
	CreateTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Response, error)
	GetTopics(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
}

type topicServiceClient struct {
	cc *grpc.ClientConn
}

func NewTopicServiceClient(cc *grpc.ClientConn) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) CreateTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/gprc.tutorial.topic.TopicService/CreateTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) GetTopics(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/gprc.tutorial.topic.TopicService/GetTopics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopicService service

type TopicServiceServer interface {
	CreateTopic(context.Context, *Topic) (*Response, error)
	GetTopics(context.Context, *GetRequest) (*Response, error)
}

func RegisterTopicServiceServer(s *grpc.Server, srv TopicServiceServer) {
	s.RegisterService(&_TopicService_serviceDesc, srv)
}

func _TopicService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gprc.tutorial.topic.TopicService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).CreateTopic(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gprc.tutorial.topic.TopicService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).GetTopics(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gprc.tutorial.topic.TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopic",
			Handler:    _TopicService_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _TopicService_GetTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/topic/topic.proto",
}

func init() { proto.RegisterFile("proto/topic/topic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x35, 0xad, 0x5b, 0xdb, 0xd9, 0xe2, 0x21, 0x0a, 0x86, 0x82, 0x74, 0xd9, 0x53, 0x4f, 0xab,
	0xac, 0x9f, 0xe0, 0xa1, 0x28, 0x78, 0x89, 0xde, 0x65, 0xcd, 0x0e, 0x25, 0x50, 0x9a, 0x98, 0x4c,
	0x05, 0x7f, 0xc0, 0x83, 0x7f, 0xe2, 0x5f, 0xca, 0x4e, 0x5c, 0xf4, 0xb0, 0xd8, 0x4b, 0x98, 0x79,
	0xf3, 0xde, 0xf0, 0xde, 0x04, 0x2e, 0x7c, 0x70, 0xe4, 0xae, 0xc8, 0x79, 0x6b, 0xd2, 0x5b, 0x31,
	0x22, 0xcf, 0x36, 0x3e, 0x98, 0x8a, 0xf6, 0xe4, 0x82, 0x6d, 0xb6, 0x15, 0x8f, 0xca, 0x0f, 0x01,
	0xd9, 0x53, 0x57, 0xc9, 0x53, 0x18, 0xd9, 0x56, 0x89, 0x42, 0xac, 0x66, 0x7a, 0x64, 0x5b, 0x79,
	0x0e, 0x19, 0x59, 0xda, 0xa2, 0x1a, 0x31, 0x94, 0x1a, 0x59, 0x40, 0xde, 0x62, 0x34, 0xc1, 0x7a,
	0xb2, 0x6e, 0xa7, 0xc6, 0x3c, 0xfb, 0x0b, 0x75, 0x3a, 0x1f, 0xac, 0x41, 0x75, 0x5c, 0x88, 0x55,
	0xa6, 0x53, 0x23, 0x97, 0x90, 0x9b, 0x86, 0x70, 0xe3, 0xc2, 0xfb, 0xb3, 0x6d, 0x55, 0xc6, 0x3a,
	0xe8, 0xa1, 0xbb, 0xb6, 0x9c, 0x03, 0xac, 0x91, 0x34, 0xbe, 0xee, 0x31, 0x52, 0xf9, 0x29, 0x60,
	0xaa, 0x31, 0x7a, 0xb7, 0x8b, 0x28, 0x15, 0x9c, 0x98, 0x80, 0x0d, 0x61, 0xb2, 0x37, 0xd5, 0x7d,
	0x2b, 0xaf, 0x21, 0xe3, 0x18, 0xec, 0x31, 0xaf, 0x17, 0xd5, 0x40, 0xc4, 0x8a, 0xe3, 0xe9, 0x44,
	0x94, 0x35, 0x4c, 0xb8, 0x88, 0x6a, 0x5c, 0x8c, 0x0f, 0x48, 0x7e, 0x98, 0xf5, 0x97, 0x80, 0x39,
	0x23, 0x8f, 0x18, 0xde, 0xba, 0x30, 0xf7, 0x90, 0xdf, 0xb2, 0x83, 0x74, 0xb9, 0x7f, 0x76, 0x2c,
	0x2e, 0x07, 0x67, 0x7d, 0xb4, 0xf2, 0x48, 0x3e, 0xc0, 0x6c, 0x8d, 0xc4, 0xe4, 0x28, 0x97, 0x83,
	0xec, 0xdf, 0xbb, 0x1c, 0x5c, 0xf7, 0x32, 0xe1, 0xbf, 0xbe, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0xc3, 0xb0, 0x77, 0x06, 0x02, 0x00, 0x00,
}
